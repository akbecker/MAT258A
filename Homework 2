Homework 2
Excercise 3
Links to MATLAB files

Note: Results are shown in paper copy that will be handed in during class.

The following pieces of close are included below:
* The pieces of code are seperated by a string of "------------" *
1) Link to MAT file (can't be shown here)
2) Master file
3) Objective function
4) Gradient function

MAT FILE ----------------------------------------------------------------------------------------------------
- This data file can't be shown here

binary.mat
https://drive.google.com/a/ucdavis.edu/file/d/0B0PtsQs7qYoUdHhJOVBuY1ZOM2s/view?usp=sharing

MASTER -------------------------------------------------------------------------------------------------------

clc
clear all
clear home

% Parameters
x = [0;0;0]; % Initial guess ([a1; a2; b])
alf = .0001; % Initial step size
beta = 0.5; % Step scaling factor
tol = 10^-5; % Tolerance (norm of gradient and difference in f)
k_max = 10000; % Maximum iterations

% Load data
load binary.mat
y = num(:,1); % Admit (1 = yes, 0 = no)
u = [num(:,2)'; num(:,3)']; % Scores ([GRE, GPA])

k = 1;
while true % Begin search
    
    % f and df at k
    fx(k) = f(x(:,k),y,u);
    dfx = df(x(:,k),y,u);
    
    % x and fx at k+1
    x(:,k+1) = x(:,k) - alf*dfx';
    fx(k+1) = f(x(:,k+1),y,u);
    
    % Break if gradient or difference in f is small
    if abs(fx(k+1)- fx(k)) < tol || norm(dfx,2) < tol
        break
    end
    
    % Check descent condition
    dx = x(:,k+1) - x(:,k); % Change in x
    if  fx(k+1) > fx(k) + dfx*dx + 1/(2*alf)*norm(dx,2)^2; % If fails
        alf = beta*alf; % Change step size and try again
    else % If passes
        k = k + 1; % Increase counter and move on
    end
    
    % Break if counter reaches maximum iterations
    if k > k_max
        break
    end
    
    % Break if numbers aren't real
    if isnan(x(1,k))
        fprintf('Has NANs \n')
        break
    end
    
end % End search

% Calculate probability given GRE and GPA 
a = x(1:2,end); 
b = x(2,end); 
for i = 1:size(u,2)
    p(i) = exp(a'*u(:,i)+b)/(1+exp(a'*u(:,i)+b));
end

% Sort GRE probability (GRE - least to greatest)
temp = sort([u(1,:)', p']);
up1 = temp(:,1); % Sorted GRE
p1 = temp(:,2); % Sorted probability

% Sort GPA probability (GPA - least to greatest)
temp = sort([u(2,:)', p']);
up2 = temp(:,1); % Sorted GPA
p2 = temp(:,2); % Sorted probability

% GRE and GPA scores
GPA = u(2,:);
GRE = u(1,:);

% GRE and GPA scores (1 == admit, 0 = not admit)
GPA1 = GPA(y==1);
GPA0 = GPA(y==0);
GRE1 = GRE(y==1);
GRE0 = GRE(y==0);

% GRE versus GPA at decision boundary
GPAx = linspace(min(GPA),max(GPA),100);
GREy = -(.5 - b - a(2)*GPAx)/a(1);

% Plot parameters and function as a function of iteration number
% - Do this to check for adequate convergence
figure
subplot(221), plot(x(1,:)), ylabel('a_1'), title('Convergence')
subplot(222), plot(x(2,:)), ylabel('a_2'), title('Convergence')
subplot(223), plot(x(3,:)), ylabel('b'), xlabel('Iterations')
subplot(224), plot(fx), ylabel('L(a_1,a_2,b)'), xlabel('Iterations')

% Scatter plot and decision boundary
figure
plot(GPA0,GRE0,'o',GPA1,GRE1,'+')
hold on
plot(GPAx,GREy)
legend('Admitted','Not Admitted','Decision Boundary')
xlabel('GPA')
ylabel('GRE')

% Plot GRE probability
figure
subplot(121)
plot(up1,p1)
hold on
plot(u(1,:),y,'ro')
xlabel('GRE Scores')
ylabel('Admittance')
title('GRE Admittance')

% Plot GPA probability
subplot(122)
plot(up2,p2)
hold on
plot(u(2,:),y,'ro')
xlabel('GPA Scores')
ylabel('Admittance')
legend('Probability','Student Data')
title('GPA Admittance')

OBJECTIVE FUNCTION --------------------------------------------------------------------------------

function fx = f(x,y,u) % Function

% Unpack variables
a = x(1:2); a = a(:);
b = x(3);

% Gradient of function
L = 0;
for i = 1:size(u,2)
    dL = dL + y(i)*(a'*u(:,i)+b) - log(1 + exp(a'*u(:,i)+b));
end

% Function
fx = -L;

end

GRADIENT FUNCTION ---------------------------------------------------------------------------------

function dfx = df(x,y,u) % Gradient

% Unpack variables
a = x(1:2); a = a(:);
b = x(3);

% Gradient of function
dLa = zeros(1,2);
dLb = 0;
for i = 1:size(u,2)
    dLa = dLa + (y(i) - exp(a'*u(:,i)+b)/(1 + exp(a'*u(:,i)+b)))*u(:,i)';
    dLb = dLb + (y(i) - exp(a'*u(:,i)+b)/(1 + exp(a'*u(:,i)+b)));
end

% Function
dfx = -[dLa, dLb];

end
